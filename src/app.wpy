<style lang="less">
    @import "style/weui.less";

    page {
        background-color: #F8F8F8;
        font-size: 16px;
    }

    .page__hd {
        padding: 40px;
    }

    .page__bd {
        padding-bottom: 40px;
    }

    .page__db_spacing {
        padding-left: 15px;
        padding-right: 15px;
    }

    .page__ft {
        padding-bottom: 10px;
        text-align: center;
    }

    .page__title {
        text-align: left;
        font-size: 20px;
        font-weight: 400;
    }

    .page__desc {
        margin-top: 5px;
        color: #888888;
        text-align: left;
        font-size: 14px;
    }
</style>

<script>
    import wepy from 'wepy'
    import 'wepy-async-function'
    import api from '@/utils/api'

    export default class extends wepy.app {
      config = {
        pages: [
          'pages/topics/index',
          'pages/users/me',
          'pages/users/edit',
          'pages/users/show',
          'pages/auth/login',
          'pages/auth/register',
          'pages/topics/show',
          'pages/topics/userIndex',
          'pages/comments/index',
          'pages/comments/userIndex',
          'pages/comments/create',
          'pages/notifications/index'

        ],
        window: {
          backgroundTextStyle: 'light',
          navigationBarBackgroundColor: '#fff',
          navigationBarTitleText: 'Laravel-BlogTwo',
          navigationBarTextStyle: 'black'
        },
        tabBar: {
          list: [{
            pagePath: 'pages/topics/index',
            text: '首页',
            iconPath: 'images/index.png',
            selectedIconPath: 'images/index_selected.png'
          }, {
            pagePath: 'pages/users/me',
            text: '我的',
            iconPath: 'images/user.png',
            selectedIconPath: 'images/user_selected.png'
          }],
          color: '#707070',
          selectedColor: '#00b5ad'
        }
      };

      constructor() {
        super()
        this.use('requestfix')
        this.use('promisify')
      }

      onLaunch() {
            // 启动时调用一次获取未读消息数量
        this.updateUnreadCount()
            // 每60秒，调用一次获取未读消息数量
        setInterval(() => {
          this.updateUnreadCount()
        }, 60000)
            // 获取用户权限
        this.getPerms()
      }

        /**
         * 获取未读消息数
         */
      async updateUnreadCount() {
            // 未登录时，不请求
        if (!this.checkLogin()) {
          return
        }

            // 请求消息统计接口
        let notificationResponse = await api.authRequest('user/notifications/stats', false)
            // 请求成功，赋值给全局变量unreadCount
        if (notificationResponse.statusCode === 200) {
          this.globalData.unreadCount = notificationResponse.data.unread_count
        }
      }

        // 全局变量
      globalData = {
            // 判断需要刷新的页面
        refreshPages: []
      }

      checkRefreshPages(route, callback) {
        let refreshIndex = this.globalData.refreshPages.indexOf(route)
        if (refreshIndex === -1) {
          return
        }

        this.globalData.refreshPages.splice(refreshIndex, 1)
        callback && callback()
      }

        /**
         * 获取用户信息
         */
      async getCurrentUser() {
            // 如果用户未登录
        if (!await this.checkLogin()) {
          return null
        }

            // 从缓存中获取用户信息
        let user = wepy.getStorageSync('user')

        try {
                // 登录了但是缓存中没有，请求接口获取
          if (!user) {
            let userResponse = await api.authRequest('user')
                    // 状态码为200代表请求成功
            if (userResponse.statusCode === 200) {
              user = userResponse.data
              wepy.setStorageSync('user', user)
            }
          }
        } catch (err) {
          console.log(err)
          wepy.showModal({
            title: '提示',
            content: '服务器错误，请联系管理员或重试'
          })
        }
        return user
      }

        /**
         * 用户是否已经登录
         * @returns {boolean}
         */
      async checkLogin() {
        let accessToken = wepy.getStorageSync('access_token')
        let expiredAt = wepy.getStorageSync('access_token_expired_at')
            // 如果token过期了，则调用刷新方法
        if (accessToken !== '' && expiredAt !== '') {
          if (new Date().getTime() > expiredAt) {
            let refreshResponse = await api.refreshToken(accessToken)
            if (refreshResponse.statusCode !== 200) {
              return false
            }
          }
          return true
        }
        return false
      }

      /**
       * 判断用户权限
       */
      can(targetPerm) {
        if (!this.checkLogin()) {
          return false
        }
          // 获取缓存中的权限
        let perms = wepy.getStorageSync('perms') || []
          // 判断权限中是否有目标权限
        if (perms.find(perm => perm.name === targetPerm)) {
          return true
        }
        return false
      }

        /**
         * 获取权限
         * @returns {Promise<Array>}
         */
      async getPerms() {
        let perms = []
        if (!this.checkLogin()) {
          return perms
        }

        try {
          let permsResponse = await api.authRequest('user/permissions', false)
                // 请求成功，放入storage缓存中
          if (permsResponse.statusCode === 200) {
            perms = permsResponse.data.data
            wepy.setStorageSync('perms', perms)
          }
        } catch (err) {
          wepy.showModal({
            title: '提示',
            content: '获取用户权限失败，可重启小程序再次获取'
          })
        }
        return perms
      }
}

</script>
